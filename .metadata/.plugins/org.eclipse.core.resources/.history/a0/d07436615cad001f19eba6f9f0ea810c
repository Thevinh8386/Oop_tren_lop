package CuoiKy;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import De4.SVCDCQ;

public class IEmployeeManagerImpl implements IEmployeeManager {
	static Scanner sc = new Scanner(System.in);
	static ArrayList<Employee> employeeList = new ArrayList<>();
	
	int n = 0;
    while (true) {
        try {
            System.out.print("Nhap so luong nhân sự (2 <= n <= 4): ");
            n = sc.nextInt();
            sc.nextLine(); 
            if (n >= 2 && n <= 4) {
            	
                break;
            } else {
                System.out.println("So luong sinh vien phai nam trong khoang 2 den 4.");
            }
        } catch (Exception e) {
            System.out.println("Loi nhap du lieu: " + e.getMessage());
            sc.nextLine(); 
        }
    }

    for (int i = 0; i < n; i++) {
        System.out.println("Nhap thong tin sinh vien thu " + (i + 1) + ":");
        Employee employee = new Employee();
        employee.nhapThongTin(sc);
        employeeList.add(sv);
    }
    
	//Thêm một nhân sự mới
	@Override
    public boolean addEmployee(Employee e) {
		try {		
            // Kiểm tra trùng lặp ID
            for (Employee employee : employeeList) {
                if (employee.getUser_id() == e.getUser_id()) {
                    throw new IllegalArgumentException("ID nhân sự đã tồn tại!");
                }
            }
            employeeList.add(e);
            return true;
        } catch (IllegalArgumentException ex) {
            System.err.println("Lỗi: " + ex.getMessage());
        } catch (Exception ex) {
            System.err.println("Lỗi không xác định khi thêm nhân sự: " + ex.getMessage());
        }
        return false;
    }
	
	
	//Thay đổi thông tin nhân sự
	@Override
	public boolean editEmployee(Employee e) {
		try {
            for (int i = 0; i < employeeList.size(); i++) {
                if (employeeList.get(i).getUser_id() == e.getUser_id()) {
                    employeeList.set(i, e);
//                    System.out.println("Cập nhật thông tin nhân sự thành công!");
                    return true;
                }
            }
            throw new IllegalArgumentException("Không tìm thấy nhân sự với ID: " + e.getUser_id());
        } catch (IllegalArgumentException ex) {
            System.err.println("Lỗi: " + ex.getMessage());
        } catch (Exception ex) {
            System.err.println("Lỗi không xác định khi cập nhật nhân sự: " + ex.getMessage());
        }
        return false;
	}
	
	@Override
	public List<Employee> searchEmployee(String fullName) {
		try {
            List<Employee> result = new ArrayList<>();
            for (Employee employee : employeeList) {
                if (employee.getUser_fullname().equalsIgnoreCase(fullName)) {
                    result.add(employee);
                }
            }
            if (result.isEmpty()) {
                throw new IllegalArgumentException("Không tìm thấy nhân sự nào có tên đầy đủ: " + fullName);
            }
            return result;
        } catch (IllegalArgumentException ex) {
            System.err.println("Lỗi: " + ex.getMessage());
        } catch (Exception ex) {
            System.err.println("Lỗi không xác định khi tìm kiếm nhân sự: " + ex.getMessage());
        }
        return new ArrayList<>(); // Trả về danh sách rỗng nếu xảy ra lỗi
	}
	
	@Override
	public double getTotalSalary() {
		try {
            double total = 0;
            for (Employee employee : employeeList) {
                total += employee.getSalary();
            }
            return total;
        } catch (Exception ex) {
            System.err.println("Lỗi không xác định khi tính tổng lương: " + ex.getMessage());
        }
        return 0; //nếu xảy ra lỗi
	}
	
	public void displayEmployee() {
		if (!employeeList.isEmpty()) {
			for (Employee employee : employeeList) {
				System.out.println("Danh sách các nhân sự: ");
				System.out.println(employee.toString());
				return;
			}
		}
		else {
			System.out.println("Danh sách đang trống!");
		}
	}
}
